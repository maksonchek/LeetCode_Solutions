https://pandoraresearch.com/ru/blog/slozhnost-operatsij-python

Изначально, для понимания временной сложности операций над множествами в Python, полезно осознать, что Python использует хэширование (hashing) для реализации множеств.

При добавлении элемента во множество (используя метод add()), Python вычисляет хэш (hash) данного элемента и затем использует этот хэш для определения, куда сохранить элемент внутри хэш-таблицы, которая представляет собой основную структуру данных для множества. Вставка в хэш-таблицу работает за время O(1), в среднем случае, потому что поиск подходящего места для вставки элемента выполняется за постоянное время, не зависящее от размера хэш-таблицы.

При проверке принадлежности элемента множеству (через оператор in), Python также использует хэширование для определения, где искать элемент в хэш-таблице. В среднем случае, это также выполняется за постоянное время O(1), так как поиск элемента в хэш-таблице происходит с использованием хэша элемента, и обычно требуется только поиск одного элемента в соответствующем "ведре" (bucket) хэш-таблицы.

Конечно, в худшем случае, когда возникают коллизии (когда два элемента имеют одинаковый хэш и должны быть размещены в одном "ведре"), операция поиска может потребовать времени O(k), где k - количество элементов в "ведре". Однако в типичных случаях, когда хэш-функция хорошо распределяет элементы по "ведрам", такие ситуации редки, и поиск по-прежнему работает за O(1).

Таким образом, в среднем случае время выполнения операций добавления и проверки принадлежности элемента в множество в Python - O(1).